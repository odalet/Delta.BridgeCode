using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Delta.BridgeCode.Analysis.Model;

namespace Delta.BridgeCode.Codegen.CSharp
{
    public class CodeGenerator
    {
        private readonly Stack<StringBuilder> builders = new Stack<StringBuilder>();
        private readonly StringBuilder builder = new StringBuilder();

        public string Generate(IAst ast)
        {
            PushBuilder();
            VisitAst(ast);
            return PopBuilder();
        }

        private StringBuilder Builder
        {
            get { return builders.Peek(); }
        }

        private void PushBuilder()
        {
            builders.Push(new StringBuilder());
        }

        private string PopBuilder()
        {
            return builders.Pop().ToString();
        }

        #region Visitor

        private void VisitAst(IAst ast)
        {
            Builder.AppendLine("// This code was generated by a tool.");
            foreach (var ns in ast.Namespaces)
                VisitNamespace(ns);
        }

        private void VisitNamespace(INamespace ns)
        {
            Builder.Append("namespace ");

            PushBuilder();
            VisitIdentifier(ns.Identifier);
            var id = PopBuilder();
            Builder.Append(id);
            Builder.AppendLine();
            Builder.AppendLine("{");

            var count = 0;
            foreach (var typeDeclaration in ns.TypeDeclarations)
            {
                PushBuilder();
                VisitTypeDeclaration(typeDeclaration);
                var tdecl = PopBuilder();                
                Builder.Append(Tabify(tdecl, 1));

                count++;
                if (count < ns.TypeDeclarations.Count)
                    Builder.AppendLine();
            }
            
            Builder.AppendLine("}");
        }

        private void VisitTypeDeclaration(ITypeDeclaration decl)
        {
            Builder.Append("public static class ");

            PushBuilder();
            VisitIdentifier(decl.Identifier);
            var id = PopBuilder();
            Builder.Append(id);
            Builder.AppendLine();
            Builder.AppendLine("{");

            PushBuilder();
            // Contents
            var contents = PopBuilder();
            contents = "Foo";
            Builder.AppendLine(Tabify(contents, 1));

            Builder.AppendLine("}");
        }

        private void VisitIdentifier(IIdentifier identifier)
        {
            Builder.Append(identifier.Name);
        }

        #endregion

        private string Tabify(string input, int level)
        {
            //const char tabChar = '\t';
            const char tabChar = ' ';
            if (level <= 0)
                return input;
            var tabs = new string(tabChar, level);
            return string.Join("\r\n", input
                .Split(new[] { "\r\n" }, StringSplitOptions.None)
                .Select(s => string.IsNullOrEmpty(s) ? s : tabs + s));
        }
    }
}
